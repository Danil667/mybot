#!venv/bin/python
import logging
import config
import requests
import random
from aiogram import Bot, Dispatcher, executor, types
from bs4 import BeautifulSoup as BS
logging.basicConfig(level=logging.INFO)

bot = Bot(config.TOKEN)
dp = Dispatcher(bot)

r = requests.get('https://sinoptik.ua/–ø–æ–≥–æ–¥–∞-—É–ª—å—è–Ω–æ–≤—Å–∫/')
html = BS(r.content, 'html.parser')
for el in html.select('#content'):
    temp_now = el.select('.temperature .cur')[0].text
    temp_max = el.select('.temperature .max')[0].text
    text = el.select('.wDescription .description')[0].text

layout = dict(zip(map(ord, "qwertyuiop[]asdfghjkl;'zxcvbnm,./`"
                           'QWERTYUIOP{}ASDFGHJKL:"ZXCVBNM<>?~'),
                           "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é.—ë"
                           '–ô–¶–£–ö–ï–ù–ì–®–©–ó–•–™–§–´–í–ê–ü–†–û–õ–î–ñ–≠–Ø–ß–°–ú–ò–¢–¨–ë–Æ,–Å'))
# /start
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    menu_keyboard.add(types.KeyboardButton(text="–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã ‚õÖ"))
    menu_keyboard.add(types.KeyboardButton(text="–†–∞–Ω–¥–æ–º üé≤"))
    menu_keyboard.add(types.KeyboardButton(text="–ü–µ—Ä–µ–≤–æ–¥ —Ä–∞—Å–∫–ª–∞–¥–∫–∏"))
    menu_keyboard.add(types.KeyboardButton(text="–ü–æ–º–æ—â—å"))
    menu_keyboard.add(types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞"))
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º!", reply_markup=menu_keyboard)

#help
@dp.message_handler(commands=["help"])
async def welcome(message):
    start_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, <strong>{0.first_name}</strong>! \n\n–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>danila73bot</b>\n\n–ò –≤–æ—Ç —á—Ç–æ —è –º–æ–≥—É: \n‚Ä¢–ü–æ–∫–∑–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –£–ª—å—è–Ω–æ–≤—Å–∫–µ ‚õÖ \n‚Ä¢–í—ã–±—Ä–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ üé≤ \n‚Ä¢–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –Ω–∞ —Ä—É—Å—Å–∫—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É \n –î–ª—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é".format(message.from_user), parse_mode='html')
    await message.answer("–í–≤–µ–¥–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É üòé")

#‚Äú–û—Ç–º–µ–Ω–∞‚Äù
@dp.message_handler(lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
async def action_cancel(message: types.Message):
    remove_keyboard = types.ReplyKeyboardRemove()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=remove_keyboard)

@dp.message_handler(content_types=['text'])
async def keyboard_answer(message: types.message):
    if message.chat.type == 'private':
        if message.text == '–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã ‚õÖ':
            await bot.send_message(message.chat.id, "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ –£–ª—å—è–Ω–æ–≤—Å–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è:\n" + '–°–µ–π—á–∞—Å ' + temp_now + ', ' + temp_max + '\n' + text)
        elif message.text == '–†–∞–Ω–¥–æ–º üé≤':
            await bot.send_message(message.chat.id, str(random.randint(1, 1000)))
        elif message.text == '–ü–æ–º–æ—â—å':
            await welcome(message)
        elif message.text == '–ü–µ—Ä–µ–≤–æ–¥ —Ä–∞—Å–∫–ª–∞–¥–∫–∏':
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")
        else:
            await bot.send_message(message.chat.id, message.text.translate(layout))
            await bot.send_message(message.chat.id, "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –º–µ–Ω—é —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–º–∞–Ω–¥–∞–º–∏")



if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)